# ========================
# VOLUMES
# ========================
volumes:
  mlflow-postgres-db:
  mlflow-minio-data:
  airflow-postgres-db:

# ========================
# NETWORK
# ========================
networks:
  airflow_net:
    name: airflow_net
    driver: bridge
  mlflow_net:
    name: mlflow_net
    driver: bridge
  mlops_net:
    name: mlops_net
    driver: bridge

# ========================
# BUSINESS SERVICES
# ========================
services:
  ml_data_dev:
    image: ml-data:dev
    build:
      context: .
      dockerfile: ./docker/dev/ml/data/Dockerfile
    command:
      - --raw-path
      - /app/data/raw/${RAW_FILE_NAME}
      - --site
      - ${SITE}
      - --orientation
      - ${ORIENTATION}
      - --range-start
      - "${RANGE_START}"
      - --range-end
      - "${RANGE_END}"
      - --timestamp-col
      - date_et_heure_de_comptage
      - --sub-dir
      - ${SUB_DIR}
      - --interim-name
      - ${INTERIM_NAME}
    restart: "no"
    volumes:
      # Bind host for external exchanges
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - airflow_net
    profiles: ["all", "ml"]

  ml_features_dev:
    image: ml-features:dev
    build:
      context: .
      dockerfile: ./docker/dev/ml/features/Dockerfile
    command:
      - --interim-path
      - /app/data/interim/${SUB_DIR}/${INTERIM_NAME}
      - --sub-dir
      - ${SUB_DIR}
      - --processed-name
      - ${PROCESSED_NAME}
      - --timestamp-col
      - date_et_heure_de_comptage
    restart: "no"
    volumes:
      # Bind host for external exchanges
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - airflow_net
    profiles: ["all", "ml"]

  ml_models_dev:
    image: ml-models:dev
    build:
      context: .
      dockerfile: ./docker/dev/ml/models/Dockerfile
    command:
      - --processed-path
      - /app/data/processed/${SUB_DIR}/${PROCESSED_NAME}
      - --sub-dir
      - ${SUB_DIR}
      - --target-col
      - comptage_horaire
      - --ts-col-utc
      - date_et_heure_de_comptage_utc
      - --ts-col-local
      - date_et_heure_de_comptage_local
      - --ar
      - "${AR}"
      - --mm
      - "${MM}"
      - --roll
      - "${ROLL}"
      - --test-ratio
      - "${TEST_RATIO}"
      - --grid-iter
      - "${GRID_ITER}"
    restart: "no"
    volumes:
      # Bind host for external exchanges
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
    networks:
      - mlflow_net
      - airflow_net
    profiles: ["all", "ml"]

  api_dev:
    image: api:dev
    build:
      context: .
      dockerfile: ./docker/dev/api/Dockerfile
    ports:
      - "8000:8000"
    restart: unless-stopped
    volumes:
      - ./data:/app/data
    environment:
      DATA_FINAL_ROOT: /app/data/final
    networks:
      - airflow_net
    profiles: ["all", "api"]

# ========================
# MLFLOW SERVICES
# ========================
  mlflow-postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow
      POSTGRES_DB: mlflow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - mlflow-postgres-db:/var/lib/postgresql/data
    restart: always
    networks:
      - mlflow_net
    profiles: ["all", "mlflow"]

  mlflow-minio:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data
    volumes:
      - mlflow-minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: always
    networks:
      - mlflow_net
      - mlops_net
    profiles: ["all", "mlflow"]

  mlflow-mc-init:
    image: minio/mc
    depends_on:
      mlflow-minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://mlflow-minio:9000 minio minio123 &&
      mc mb -p minio/mlflow || true &&
      mc anonymous set download minio/mlflow || true &&
      touch /tmp/ok && sleep 1
      "
    networks:
      - mlflow_net
    profiles: ["all", "mlflow"]

  mlflow-server:
    image: mlflow:dev
    build:
      context: .
      dockerfile: docker/dev/mlflow/Dockerfile
    depends_on:
      mlflow-postgres:
        condition: service_healthy
      mlflow-minio:
        condition: service_healthy
      mlflow-mc-init:
        condition: service_completed_successfully
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://mlflow:mlflow@mlflow-postgres:5432/mlflow
      MLFLOW_DEFAULT_ARTIFACT_ROOT: s3://mlflow/
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      AWS_DEFAULT_REGION: us-east-1
      MLFLOW_S3_ENDPOINT_URL: http://mlflow-minio:9000
    ports:
      - "5000:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 5s
      timeout: 5s
      retries: 30
    command:
      - server
      - --host
      - 0.0.0.0
      - --port
      - "5000"
    restart: unless-stopped
    networks:
      - mlflow_net
      - mlops_net
    profiles: ["all", "mlflow"]

# ========================
# AIRFLOW SERVICES
# ========================
  airflow-mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    restart: always
    networks:
      - airflow_net
    profiles: ["all", "airflow"]

  airflow-postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow-postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - airflow_net
    profiles: ["all", "airflow"]

  airflow-redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    networks:
      - airflow_net
    profiles: ["all", "airflow"]

  airflow-init:
    image: apache/airflow:2.8.1
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@airflow-redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: "AL5jw4sTifD5GJuUXSgse1c5KXCwRFV7GFyzn7QevK8="
    user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
    depends_on:
      airflow-redis:
        condition: service_healthy
      airflow-postgres:
        condition: service_healthy
    networks:
      - airflow_net
    command: >
      bash -c "airflow db migrate &&
        (airflow users create --username ${_AIRFLOW_WWW_USER_USERNAME:-airflow} --password ${_AIRFLOW_WWW_USER_PASSWORD:-airflow} --firstname Admin --lastname User --role Admin --email admin@example.com || true) &&
        airflow variables import /opt/airflow/config/variables.json"
    restart: "no"
    volumes:
      - ./docker/dev/airflow/variables.json:/opt/airflow/config/variables.json
    profiles: ["all", "airflow"]

  airflow-webserver:
    image: apache/airflow:2.8.1
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@airflow-redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: "AL5jw4sTifD5GJuUXSgse1c5KXCwRFV7GFyzn7QevK8="
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
      AIRFLOW__CORE__LOAD_EXAMPLES: "true"
      AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
      AIRFLOW__SMTP__SMTP_HOST: "mailhog"
      AIRFLOW__SMTP__SMTP_PORT: 1025
      AIRFLOW__SMTP__SMTP_MAIL_FROM: "airflow@test.local"
      AIRFLOW__SMTP__SMTP_STARTTLS: "False"
      AIRFLOW__SMTP__SMTP_SSL: "False"
    user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: ["webserver"]
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    volumes:
      # Bind host for external exchanges
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./data:/opt/airflow/data
      # socket bind for container exchanges
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - airflow_net
      - mlops_net
    profiles: ["all", "airflow"]

  airflow-scheduler:
    image: apache/airflow:2.8.1
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@airflow-redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: "AL5jw4sTifD5GJuUXSgse1c5KXCwRFV7GFyzn7QevK8="
      AIRFLOW__SMTP__SMTP_HOST: "mailhog"
      AIRFLOW__SMTP__SMTP_PORT: 1025
      AIRFLOW__SMTP__SMTP_MAIL_FROM: "airflow@test.local"
      AIRFLOW__SMTP__SMTP_STARTTLS: "False"
      AIRFLOW__SMTP__SMTP_SSL: "False"
      DOCKER_HOST: unix:///var/run/docker.sock
    user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: ["scheduler"]
    healthcheck:
      test:
        - CMD-SHELL
        - airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    volumes:
      # Bind host for external exchanges
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./data:/opt/airflow/data
      # socket bind for container exchanges
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - airflow_net
      - mlops_net
    profiles: ["all", "airflow"]

  airflow-worker:
    image: apache/airflow:2.8.1
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@airflow-redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: "AL5jw4sTifD5GJuUXSgse1c5KXCwRFV7GFyzn7QevK8="
      DOCKER_HOST: unix:///var/run/docker.sock
    user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: ["celery", "worker"]
    healthcheck:
      test:
        - CMD-SHELL
        - celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    volumes:
      # Bind host for external exchanges
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./data:/opt/airflow/data
      # socket bind for container exchanges
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - airflow_net
    profiles: ["all", "airflow"]

  airflow-flower:
    image: apache/airflow:2.8.1
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow-postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@airflow-redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: "AL5jw4sTifD5GJuUXSgse1c5KXCwRFV7GFyzn7QevK8="
    user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: ["celery", "flower"]
    ports:
      - "5555:5555"
    restart: always
    networks:
      - airflow_net
    profiles: ["all", "airflow"]